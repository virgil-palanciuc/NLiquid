// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  VIRGILP-MACW7
// DateTime: 11/27/2012 7:46:01 PM
// UserName: virgilp
// Input file <NLiquidParser.y - 11/27/2012 7:45:54 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using NLiquid.Runtime;

namespace NLiquid.Analyzing
{
public enum Tokens {
    error=1,EOF=2,COMMENT=3,IDENTIFIER=4,NUM_LITERAL=5,BOOL_LITERAL=6,
    STRING_LITERAL=7,PLAIN=8,TAG_START=9,TAG_END=10,OUTPUT_START=11,OUTPUT_END=12,
    CAPTURE=13,END_CAPTURE=14,RAW=15,END_RAW=16,IF=17,END_IF=18,
    UNLESS=19,END_UNLESS=20,ELSE=21,CYCLE=22,WHEN=23,IN=24,
    AND=25,OR=26,TIMEOUT=27,ASSIGN=28,WITH=29,INCLUDE=30,
    NIL_LITERAL=31,CASE=32,END_CASE=33,FOR=34,END_FOR=35,TABLE=36,
    END_TABLE=37,RIGHT_PAR=38,LEFT_PAR=39,OP_ASSIGN=40,DOT=41,COL=42,
    DOT_DOT=43,PIPE=44,COMMA=45,OP_AND=46,OP_OR=47,OP_NOT=48,
    OP_LT=49,OP_GT=50,OP_LE=51,OP_GE=52,OP_EQ=53,OP_NE=54};

public struct ValueType
{
    public long Integer;
    public string String;
	public StringBuilder StringBuilder;
    public double Double;
	public bool Bool;
	public Expression expr;
	public StatementList statementList;
	public IStatement  statement;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from NLiquidParser.y - 11/27/2012 7:45:54 PM
	public StatementList program;
	private StatementFactory codegen;
	private Stack<IStatement> currentStatement;
  // End verbatim content from NLiquidParser.y - 11/27/2012 7:45:54 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[77];
  private static State[] states = new State[171];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "statementList", "statement", "plainInst", "assignInst", 
      "forInst", "ifInst", "caseInst", "rawInst", "unlessInst", "tableInst", 
      "captureInst", "includeInst", "timeoutInst", "cycleInst", "commentInst", 
      "outputInst", "expr", "term", "fact", "lookup", "stringList", "attributes", 
      "Anon@1", "optionalElse", "Anon@2", "whenList", "when", "Anon@3", "optionalWith", 
      "cycleGroup", "exprList", "attribute", "filterList", "filter", "OptionalParams", 
      };

  static Parser() {
    states[0] = new State(new int[]{8,6,9,8,11,91,2,-3},new int[]{-1,1,-3,3,-4,104,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{8,6,9,8,11,91,2,-2},new int[]{-4,4,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[4] = new State(-5);
    states[5] = new State(-6);
    states[6] = new State(-40);
    states[7] = new State(-7);
    states[8] = new State(new int[]{28,9,34,43,17,53,32,66,15,108,19,113,36,122,13,132,30,139,27,145,22,148,3,154});
    states[9] = new State(new int[]{4,10});
    states[10] = new State(new int[]{40,11});
    states[11] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,12,-20,32,-21,16,-22,28});
    states[12] = new State(new int[]{10,13,25,14,26,22});
    states[13] = new State(-38);
    states[14] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-20,15,-21,16,-22,28});
    states[15] = new State(-20);
    states[16] = new State(new int[]{53,17,54,33,49,35,50,37,52,39,51,41,10,-29,25,-29,26,-29,38,-29,12,-29,44,-29,45,-29,4,-29,43,-29});
    states[17] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-21,18,-22,28});
    states[18] = new State(-23);
    states[19] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,20,-20,32,-21,16,-22,28});
    states[20] = new State(new int[]{38,21,25,14,26,22});
    states[21] = new State(-30);
    states[22] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-20,23,-21,16,-22,28});
    states[23] = new State(-21);
    states[24] = new State(-31);
    states[25] = new State(-32);
    states[26] = new State(-33);
    states[27] = new State(-34);
    states[28] = new State(new int[]{41,29,53,-35,54,-35,49,-35,50,-35,52,-35,51,-35,10,-35,25,-35,26,-35,38,-35,12,-35,44,-35,45,-35,4,-35,43,-35});
    states[29] = new State(new int[]{4,30});
    states[30] = new State(-36);
    states[31] = new State(-37);
    states[32] = new State(-22);
    states[33] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-21,34,-22,28});
    states[34] = new State(-24);
    states[35] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-21,36,-22,28});
    states[36] = new State(-25);
    states[37] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-21,38,-22,28});
    states[38] = new State(-26);
    states[39] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-21,40,-22,28});
    states[40] = new State(-27);
    states[41] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-21,42,-22,28});
    states[42] = new State(-28);
    states[43] = new State(new int[]{4,44});
    states[44] = new State(new int[]{24,45});
    states[45] = new State(new int[]{39,160,4,31},new int[]{-22,46});
    states[46] = new State(new int[]{41,29,10,-69,4,-69},new int[]{-24,47});
    states[47] = new State(new int[]{10,48,4,157},new int[]{-34,156});
    states[48] = new State(new int[]{8,6,9,8,11,91},new int[]{-3,49,-4,104,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[49] = new State(new int[]{9,50,8,6,11,91},new int[]{-4,4,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[50] = new State(new int[]{35,51,28,9,34,43,17,53,32,66,15,108,19,113,36,122,13,132,30,139,27,145,22,148,3,154});
    states[51] = new State(new int[]{10,52});
    states[52] = new State(-44);
    states[53] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,54,-20,32,-21,16,-22,28});
    states[54] = new State(new int[]{10,55,25,14,26,22});
    states[55] = new State(new int[]{8,6,9,8,11,91},new int[]{-3,56,-4,104,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[56] = new State(new int[]{9,57,8,6,11,91},new int[]{-4,4,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[57] = new State(new int[]{28,9,34,43,17,53,32,66,15,108,19,113,36,122,13,132,30,139,27,145,22,148,3,154,21,-46,18,-46},new int[]{-25,58});
    states[58] = new State(new int[]{21,62,18,-48},new int[]{-26,59});
    states[59] = new State(new int[]{18,60});
    states[60] = new State(new int[]{10,61});
    states[61] = new State(-47);
    states[62] = new State(new int[]{10,63});
    states[63] = new State(new int[]{8,6,9,8,11,91},new int[]{-3,64,-4,104,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[64] = new State(new int[]{9,65,8,6,11,91},new int[]{-4,4,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[65] = new State(new int[]{28,9,34,43,17,53,32,66,15,108,19,113,36,122,13,132,30,139,27,145,22,148,3,154,18,-49,33,-49,20,-49});
    states[66] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,67,-20,32,-21,16,-22,28});
    states[67] = new State(new int[]{10,68,25,14,26,22});
    states[68] = new State(-50,new int[]{-27,69});
    states[69] = new State(new int[]{9,107},new int[]{-28,70,-29,106});
    states[70] = new State(new int[]{9,71},new int[]{-29,105});
    states[71] = new State(new int[]{23,75,21,62,33,-48},new int[]{-26,72});
    states[72] = new State(new int[]{33,73});
    states[73] = new State(new int[]{10,74});
    states[74] = new State(-51);
    states[75] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,76,-20,32,-21,16,-22,28});
    states[76] = new State(new int[]{10,77,25,14,26,22});
    states[77] = new State(new int[]{8,6,9,8,11,91},new int[]{-3,78,-4,104,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[78] = new State(new int[]{8,6,9,8,11,91},new int[]{-4,4,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[79] = new State(-8);
    states[80] = new State(-9);
    states[81] = new State(-10);
    states[82] = new State(-11);
    states[83] = new State(-12);
    states[84] = new State(-13);
    states[85] = new State(-14);
    states[86] = new State(-15);
    states[87] = new State(-16);
    states[88] = new State(-17);
    states[89] = new State(-18);
    states[90] = new State(-19);
    states[91] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,92,-20,32,-21,16,-22,28});
    states[92] = new State(new int[]{25,14,26,22,12,-73,44,-73},new int[]{-35,93});
    states[93] = new State(new int[]{12,94,44,96},new int[]{-36,95});
    states[94] = new State(-71);
    states[95] = new State(-72);
    states[96] = new State(new int[]{4,97});
    states[97] = new State(new int[]{42,99,12,-76,44,-76},new int[]{-37,98});
    states[98] = new State(-74);
    states[99] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-33,100,-19,103,-20,32,-21,16,-22,28});
    states[100] = new State(new int[]{45,101,12,-75,44,-75});
    states[101] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,102,-20,32,-21,16,-22,28});
    states[102] = new State(new int[]{25,14,26,22,45,-66,12,-66,44,-66,10,-66});
    states[103] = new State(new int[]{25,14,26,22,45,-67,12,-67,44,-67,10,-67});
    states[104] = new State(-4);
    states[105] = new State(-53);
    states[106] = new State(-54);
    states[107] = new State(new int[]{23,75});
    states[108] = new State(-42,new int[]{-23,109});
    states[109] = new State(new int[]{16,110,8,112});
    states[110] = new State(new int[]{10,111});
    states[111] = new State(-41);
    states[112] = new State(-43);
    states[113] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,114,-20,32,-21,16,-22,28});
    states[114] = new State(new int[]{10,115,25,14,26,22});
    states[115] = new State(new int[]{8,6,9,8,11,91},new int[]{-3,116,-4,104,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[116] = new State(new int[]{9,117,8,6,11,91},new int[]{-4,4,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[117] = new State(new int[]{28,9,34,43,17,53,32,66,15,108,19,113,36,122,13,132,30,139,27,145,22,148,3,154,21,-55,20,-55},new int[]{-30,118});
    states[118] = new State(new int[]{21,62,20,-48},new int[]{-26,119});
    states[119] = new State(new int[]{20,120});
    states[120] = new State(new int[]{10,121});
    states[121] = new State(-56);
    states[122] = new State(new int[]{4,123});
    states[123] = new State(new int[]{24,124});
    states[124] = new State(new int[]{4,31},new int[]{-22,125});
    states[125] = new State(new int[]{41,29,10,-69,4,-69},new int[]{-24,126});
    states[126] = new State(new int[]{10,127,4,157},new int[]{-34,156});
    states[127] = new State(new int[]{8,6,9,8,11,91},new int[]{-3,128,-4,104,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[128] = new State(new int[]{9,129,8,6,11,91},new int[]{-4,4,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[129] = new State(new int[]{37,130,28,9,34,43,17,53,32,66,15,108,19,113,36,122,13,132,30,139,27,145,22,148,3,154});
    states[130] = new State(new int[]{10,131});
    states[131] = new State(-57);
    states[132] = new State(new int[]{4,133});
    states[133] = new State(new int[]{10,134});
    states[134] = new State(new int[]{8,6,9,8,11,91},new int[]{-3,135,-4,104,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[135] = new State(new int[]{9,136,8,6,11,91},new int[]{-4,4,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[136] = new State(new int[]{14,137,28,9,34,43,17,53,32,66,15,108,19,113,36,122,13,132,30,139,27,145,22,148,3,154});
    states[137] = new State(new int[]{10,138});
    states[138] = new State(-58);
    states[139] = new State(new int[]{7,140});
    states[140] = new State(new int[]{29,143,10,-60},new int[]{-31,141});
    states[141] = new State(new int[]{10,142});
    states[142] = new State(-59);
    states[143] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,144,-20,32,-21,16,-22,28});
    states[144] = new State(new int[]{25,14,26,22,10,-61});
    states[145] = new State(new int[]{5,146});
    states[146] = new State(new int[]{10,147});
    states[147] = new State(-62);
    states[148] = new State(new int[]{7,152,39,-65,6,-65,5,-65,31,-65,4,-65},new int[]{-32,149});
    states[149] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-33,150,-19,103,-20,32,-21,16,-22,28});
    states[150] = new State(new int[]{10,151,45,101});
    states[151] = new State(-63);
    states[152] = new State(new int[]{42,153});
    states[153] = new State(-64);
    states[154] = new State(new int[]{10,155});
    states[155] = new State(-39);
    states[156] = new State(-68);
    states[157] = new State(new int[]{42,158});
    states[158] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,159,-20,32,-21,16,-22,28});
    states[159] = new State(new int[]{25,14,26,22,10,-70,4,-70});
    states[160] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,161,-20,32,-21,16,-22,28});
    states[161] = new State(new int[]{43,162,25,14,26,22});
    states[162] = new State(new int[]{39,19,7,24,6,25,5,26,31,27,4,31},new int[]{-19,163,-20,32,-21,16,-22,28});
    states[163] = new State(new int[]{38,164,25,14,26,22});
    states[164] = new State(-69,new int[]{-24,165});
    states[165] = new State(new int[]{10,166,4,157},new int[]{-34,156});
    states[166] = new State(new int[]{8,6,9,8,11,91},new int[]{-3,167,-4,104,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[167] = new State(new int[]{9,168,8,6,11,91},new int[]{-4,4,-5,5,-6,7,-7,79,-8,80,-9,81,-10,82,-11,83,-12,84,-13,85,-14,86,-15,87,-16,88,-17,89,-18,90});
    states[168] = new State(new int[]{35,169,28,9,34,43,17,53,32,66,15,108,19,113,36,122,13,132,30,139,27,145,22,148,3,154});
    states[169] = new State(new int[]{10,170});
    states[170] = new State(-45);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-4, new int[]{-7});
    rules[9] = new Rule(-4, new int[]{-8});
    rules[10] = new Rule(-4, new int[]{-9});
    rules[11] = new Rule(-4, new int[]{-10});
    rules[12] = new Rule(-4, new int[]{-11});
    rules[13] = new Rule(-4, new int[]{-12});
    rules[14] = new Rule(-4, new int[]{-13});
    rules[15] = new Rule(-4, new int[]{-14});
    rules[16] = new Rule(-4, new int[]{-15});
    rules[17] = new Rule(-4, new int[]{-16});
    rules[18] = new Rule(-4, new int[]{-17});
    rules[19] = new Rule(-4, new int[]{-18});
    rules[20] = new Rule(-19, new int[]{-19,25,-20});
    rules[21] = new Rule(-19, new int[]{-19,26,-20});
    rules[22] = new Rule(-19, new int[]{-20});
    rules[23] = new Rule(-20, new int[]{-21,53,-21});
    rules[24] = new Rule(-20, new int[]{-21,54,-21});
    rules[25] = new Rule(-20, new int[]{-21,49,-21});
    rules[26] = new Rule(-20, new int[]{-21,50,-21});
    rules[27] = new Rule(-20, new int[]{-21,52,-21});
    rules[28] = new Rule(-20, new int[]{-21,51,-21});
    rules[29] = new Rule(-20, new int[]{-21});
    rules[30] = new Rule(-21, new int[]{39,-19,38});
    rules[31] = new Rule(-21, new int[]{7});
    rules[32] = new Rule(-21, new int[]{6});
    rules[33] = new Rule(-21, new int[]{5});
    rules[34] = new Rule(-21, new int[]{31});
    rules[35] = new Rule(-21, new int[]{-22});
    rules[36] = new Rule(-22, new int[]{-22,41,4});
    rules[37] = new Rule(-22, new int[]{4});
    rules[38] = new Rule(-6, new int[]{9,28,4,40,-19,10});
    rules[39] = new Rule(-17, new int[]{9,3,10});
    rules[40] = new Rule(-5, new int[]{8});
    rules[41] = new Rule(-10, new int[]{9,15,-23,16,10});
    rules[42] = new Rule(-23, new int[]{});
    rules[43] = new Rule(-23, new int[]{-23,8});
    rules[44] = new Rule(-7, new int[]{9,34,4,24,-22,-24,10,-3,9,35,10});
    rules[45] = new Rule(-7, new int[]{9,34,4,24,39,-19,43,-19,38,-24,10,-3,9,35,10});
    rules[46] = new Rule(-25, new int[]{});
    rules[47] = new Rule(-8, new int[]{9,17,-19,10,-3,9,-25,-26,18,10});
    rules[48] = new Rule(-26, new int[]{});
    rules[49] = new Rule(-26, new int[]{21,10,-3,9});
    rules[50] = new Rule(-27, new int[]{});
    rules[51] = new Rule(-9, new int[]{9,32,-19,10,-27,-28,9,-26,33,10});
    rules[52] = new Rule(-29, new int[]{9,23,-19,10,-3});
    rules[53] = new Rule(-28, new int[]{-28,-29});
    rules[54] = new Rule(-28, new int[]{-29});
    rules[55] = new Rule(-30, new int[]{});
    rules[56] = new Rule(-11, new int[]{9,19,-19,10,-3,9,-30,-26,20,10});
    rules[57] = new Rule(-12, new int[]{9,36,4,24,-22,-24,10,-3,9,37,10});
    rules[58] = new Rule(-13, new int[]{9,13,4,10,-3,9,14,10});
    rules[59] = new Rule(-14, new int[]{9,30,7,-31,10});
    rules[60] = new Rule(-31, new int[]{});
    rules[61] = new Rule(-31, new int[]{29,-19});
    rules[62] = new Rule(-15, new int[]{9,27,5,10});
    rules[63] = new Rule(-16, new int[]{9,22,-32,-33,10});
    rules[64] = new Rule(-32, new int[]{7,42});
    rules[65] = new Rule(-32, new int[]{});
    rules[66] = new Rule(-33, new int[]{-33,45,-19});
    rules[67] = new Rule(-33, new int[]{-19});
    rules[68] = new Rule(-24, new int[]{-24,-34});
    rules[69] = new Rule(-24, new int[]{});
    rules[70] = new Rule(-34, new int[]{4,42,-19});
    rules[71] = new Rule(-18, new int[]{11,-19,-35,12});
    rules[72] = new Rule(-35, new int[]{-35,-36});
    rules[73] = new Rule(-35, new int[]{});
    rules[74] = new Rule(-36, new int[]{44,4,-37});
    rules[75] = new Rule(-37, new int[]{42,-33});
    rules[76] = new Rule(-37, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> statementList
{program = ValueStack[ValueStack.Depth-1].statementList;}
        break;
      case 3: // statementList -> /* empty */
{
                                    if(CurrentSemanticValue.statementList == null) CurrentSemanticValue.statementList = codegen.NewList();
								}
        break;
      case 4: // statementList -> statement
{	
				                   if(CurrentSemanticValue.statementList == null)  CurrentSemanticValue.statementList = codegen.NewList();
								   if(ValueStack[ValueStack.Depth-1].statement != null)      CurrentSemanticValue.statementList.InsertFront(ValueStack[ValueStack.Depth-1].statement);
								}
        break;
      case 5: // statementList -> statementList, statement
{ 
				                   if(ValueStack[ValueStack.Depth-1].statement != null) ValueStack[ValueStack.Depth-2].statementList.Add(ValueStack[ValueStack.Depth-1].statement); 
								   CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList; 
								}
        break;
      case 6: // statement -> plainInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 7: // statement -> assignInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 8: // statement -> forInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 9: // statement -> ifInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 10: // statement -> caseInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 11: // statement -> rawInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 12: // statement -> unlessInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 13: // statement -> tableInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 14: // statement -> captureInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 15: // statement -> includeInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 16: // statement -> timeoutInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 17: // statement -> cycleInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 18: // statement -> commentInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 19: // statement -> outputInst
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 20: // expr -> expr, AND, term
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.And,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 21: // expr -> expr, OR, term
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.Or,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 22: // expr -> term
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
        break;
      case 23: // term -> fact, OP_EQ, fact
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.Equ,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 24: // term -> fact, OP_NE, fact
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.NotEqu,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 25: // term -> fact, OP_LT, fact
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.Lt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 26: // term -> fact, OP_GT, fact
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.Gt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 27: // term -> fact, OP_GE, fact
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.GtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 28: // term -> fact, OP_LE, fact
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.LtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 29: // term -> fact
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
        break;
      case 30: // fact -> LEFT_PAR, expr, RIGHT_PAR
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-2].expr; }
        break;
      case 31: // fact -> STRING_LITERAL
{ CurrentSemanticValue.expr = codegen.NewExpression(ValueStack[ValueStack.Depth-1].String);}
        break;
      case 32: // fact -> BOOL_LITERAL
{ CurrentSemanticValue.expr = codegen.NewExpression(ValueStack[ValueStack.Depth-1].Bool);}
        break;
      case 33: // fact -> NUM_LITERAL
{ CurrentSemanticValue.expr = codegen.NewExpression(ValueStack[ValueStack.Depth-1].Double);}
        break;
      case 34: // fact -> NIL_LITERAL
{ CurrentSemanticValue.expr = codegen.NewExpression();}
        break;
      case 35: // fact -> lookup
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
        break;
      case 36: // lookup -> lookup, DOT, IDENTIFIER
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.Lookup, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].String); }
        break;
      case 37: // lookup -> IDENTIFIER
{ CurrentSemanticValue.expr = codegen.NewExpression(Operation.Lookup, ValueStack[ValueStack.Depth-1].String);}
        break;
      case 38: // assignInst -> TAG_START, ASSIGN, IDENTIFIER, OP_ASSIGN, expr, TAG_END
{ CurrentSemanticValue.statement = codegen.NewAssignment(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].expr);}
        break;
      case 39: // commentInst -> TAG_START, COMMENT, TAG_END
{ CurrentSemanticValue.statement = null; }
        break;
      case 40: // plainInst -> PLAIN
{ CurrentSemanticValue.statement = codegen.Write(ValueStack[ValueStack.Depth-1].String); }
        break;
      case 41: // rawInst -> TAG_START, RAW, stringList, END_RAW, TAG_END
{ CurrentSemanticValue.statement = codegen.Write(ValueStack[ValueStack.Depth-3].StringBuilder.ToString() ); }
        break;
      case 42: // stringList -> /* empty */
{ CurrentSemanticValue.StringBuilder = new StringBuilder(); }
        break;
      case 43: // stringList -> stringList, PLAIN
{ ValueStack[ValueStack.Depth-2].StringBuilder.Append(ValueStack[ValueStack.Depth-1].String); CurrentSemanticValue.StringBuilder = ValueStack[ValueStack.Depth-2].StringBuilder; }
        break;
      case 44: // forInst -> TAG_START, FOR, IDENTIFIER, IN, lookup, attributes, TAG_END, 
               //            statementList, TAG_START, END_FOR, TAG_END
{ CurrentSemanticValue.statement = codegen.NewForLoop( ValueStack[ValueStack.Depth-9].String, ValueStack[ValueStack.Depth-7].expr, ValueStack[ValueStack.Depth-6].statementList, ValueStack[ValueStack.Depth-4].statementList);}
        break;
      case 45: // forInst -> TAG_START, FOR, IDENTIFIER, IN, LEFT_PAR, expr, DOT_DOT, expr, 
               //            RIGHT_PAR, attributes, TAG_END, statementList, TAG_START, END_FOR, 
               //            TAG_END
{ CurrentSemanticValue.statement = codegen.NewForLoop( ValueStack[ValueStack.Depth-13].String, codegen.NewExpression(Operation.Range, ValueStack[ValueStack.Depth-10].expr, ValueStack[ValueStack.Depth-8].expr), ValueStack[ValueStack.Depth-6].statementList, ValueStack[ValueStack.Depth-4].statementList);}
        break;
      case 46: // Anon@1 -> /* empty */
{  currentStatement.Push(codegen.NewIf(ValueStack[ValueStack.Depth-4].expr, ValueStack[ValueStack.Depth-2].statementList)); }
        break;
      case 47: // ifInst -> TAG_START, IF, expr, TAG_END, statementList, TAG_START, Anon@1, 
               //           optionalElse, END_IF, TAG_END
{ CurrentSemanticValue.statement = currentStatement.Pop(); }
        break;
      case 49: // optionalElse -> ELSE, TAG_END, statementList, TAG_START
{ codegen.AddElseClause(currentStatement.Peek(), ValueStack[ValueStack.Depth-2].statementList); }
        break;
      case 50: // Anon@2 -> /* empty */
{ currentStatement.Push(codegen.NewCase(ValueStack[ValueStack.Depth-2].expr)); }
        break;
      case 51: // caseInst -> TAG_START, CASE, expr, TAG_END, Anon@2, whenList, TAG_START, 
               //             optionalElse, END_CASE, TAG_END
{ CurrentSemanticValue.statement = currentStatement.Pop(); }
        break;
      case 52: // when -> TAG_START, WHEN, expr, TAG_END, statementList
{ codegen.AddWhenClause(currentStatement.Peek(), ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].statementList);}
        break;
      case 55: // Anon@3 -> /* empty */
{  currentStatement.Push(codegen.NewUnless(ValueStack[ValueStack.Depth-4].expr, ValueStack[ValueStack.Depth-2].statementList)); }
        break;
      case 56: // unlessInst -> TAG_START, UNLESS, expr, TAG_END, statementList, TAG_START, 
               //               Anon@3, optionalElse, END_UNLESS, TAG_END
{ CurrentSemanticValue.statement = currentStatement.Pop(); }
        break;
      case 57: // tableInst -> TAG_START, TABLE, IDENTIFIER, IN, lookup, attributes, TAG_END, 
               //              statementList, TAG_START, END_TABLE, TAG_END
{ CurrentSemanticValue.statement = codegen.NewTableRow( ValueStack[ValueStack.Depth-9].String, ValueStack[ValueStack.Depth-7].expr, ValueStack[ValueStack.Depth-6].statementList, ValueStack[ValueStack.Depth-4].statementList);}
        break;
      case 58: // captureInst -> TAG_START, CAPTURE, IDENTIFIER, TAG_END, statementList, 
               //                TAG_START, END_CAPTURE, TAG_END
{
											   CurrentSemanticValue.statement = codegen.NewCapture( ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].statementList);
										   }
        break;
      case 59: // includeInst -> TAG_START, INCLUDE, STRING_LITERAL, optionalWith, TAG_END
{ CurrentSemanticValue.statement = codegen.Include(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-2].expr);}
        break;
      case 60: // optionalWith -> /* empty */
{ CurrentSemanticValue.expr = null; }
        break;
      case 61: // optionalWith -> WITH, expr
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
        break;
      case 62: // timeoutInst -> TAG_START, TIMEOUT, NUM_LITERAL, TAG_END
{ CurrentSemanticValue.statement = codegen.NewTimeout(ValueStack[ValueStack.Depth-2].Double);}
        break;
      case 63: // cycleInst -> TAG_START, CYCLE, cycleGroup, exprList, TAG_END
{ CurrentSemanticValue.statement = codegen.NewCycle(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-2].statementList);}
        break;
      case 64: // cycleGroup -> STRING_LITERAL, COL
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-2].String; }
        break;
      case 65: // cycleGroup -> /* empty */
{ CurrentSemanticValue.String = "";        }
        break;
      case 66: // exprList -> exprList, COMMA, expr
{ CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-3].statementList; CurrentSemanticValue.statementList.Add(ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 67: // exprList -> expr
{ CurrentSemanticValue.statementList = codegen.NewList(); CurrentSemanticValue.statementList.Add(ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 68: // attributes -> attributes, attribute
{ CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList; CurrentSemanticValue.statementList.Add(ValueStack[ValueStack.Depth-1].statement); }
        break;
      case 69: // attributes -> /* empty */
{ CurrentSemanticValue.statementList = codegen.NewList(); }
        break;
      case 70: // attribute -> IDENTIFIER, COL, expr
{ CurrentSemanticValue.statement = codegen.NewAttribute(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 71: // outputInst -> OUTPUT_START, expr, filterList, OUTPUT_END
{ CurrentSemanticValue.statement = codegen.Write(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-2].statementList); }
        break;
      case 72: // filterList -> filterList, filter
{ CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList; CurrentSemanticValue.statementList.Add(ValueStack[ValueStack.Depth-1].statement); }
        break;
      case 73: // filterList -> /* empty */
{ CurrentSemanticValue.statementList = codegen.NewList(); }
        break;
      case 74: // filter -> PIPE, IDENTIFIER, OptionalParams
{ CurrentSemanticValue.statement = codegen.NewFilter(ValueStack[ValueStack.Depth-2].String, ValueStack[ValueStack.Depth-1].statementList); }
        break;
      case 75: // OptionalParams -> COL, exprList
{ CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-1].statementList; }
        break;
      case 76: // OptionalParams -> /* empty */
{ CurrentSemanticValue.statementList = null; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn, StatementFactory codegen) : base(scn) { this.codegen = codegen; program = codegen.NewList(); currentStatement = new Stack<IStatement>(); }
}
}
